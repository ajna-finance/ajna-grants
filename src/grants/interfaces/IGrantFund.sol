// SPDX-License-Identifier: MIT

pragma solidity 0.8.16;

import { IFunding } from "../interfaces/IFunding.sol";
import { IExtraordinaryFunding } from "../interfaces/IExtraordinaryFunding.sol";
import { IStandardFunding }      from "../interfaces/IStandardFunding.sol";

interface IGrantFund is
    IFunding,
    IExtraordinaryFunding,
    IStandardFunding
{

    /**************/
    /*** Events ***/
    /**************/

    /**
     *  @notice Emitted when Ajna tokens are transferred to the GrantFund contract.
     *  @param  amount          Amount of Ajna tokens transferred.
     *  @param  treasuryBalance GrantFund's total treasury balance after the transfer.
     */
    event FundTreasury(uint256 amount, uint256 treasuryBalance);

    /**************************/
    /*** Proposal Functions ***/
    /**************************/

    /**
     * @notice Create a proposalId from a hash of proposal's targets, values, and calldatas arrays, and a description hash.
     * @dev    Consistent with proposalId generation methods used in OpenZeppelin Governor.
     * @param targets         The addresses of the contracts to call.
     * @param values          The amounts of ETH to send to each target.
     * @param calldatas       The calldata to send to each target.
     * @param descriptionHash The hash of the proposal's description string. Generated by keccak256(bytes(description))).
     * @return proposalId     The hashed proposalId created from the provided params.
     */
    function hashProposal(
        address[] memory targets,
        uint256[] memory values,
        bytes[] memory calldatas,
        bytes32 descriptionHash
    ) external pure returns (uint256 proposalId);

    /**
     * @notice Find the status of a given proposal.
     * @dev Check proposal status based upon Grant Fund specific logic.
     * @param proposalId The id of the proposal to query the status of.
     * @return ProposalState of the given proposal.
     */
    function state(
        uint256 proposalId
    ) external view returns (ProposalState);

    /**************************/
    /*** Treasury Functions ***/
    /**************************/

    /**
     * @notice Transfers Ajna tokens to the GrantFund contract.
     * @param fundingAmount The amount of Ajna tokens to transfer.
     */
    function fundTreasury(uint256 fundingAmount) external;

}
